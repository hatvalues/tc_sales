labs(list(title = "Heteroskedastic Trend by Quota by Group"
, x = "Quota (1000's)", y = "Missing variable - falling variance")) +
theme_bw() + myGgTheme
gMVar
lm.mvar <- lm(OnTarget~Group:Quota+rollingSD)
summary(lm.mvar)
lm.mvar <- lm(OnTarget~Group:Quota_C+rollingSD -1)
summary(lm.mvar)
lm.mvar <- lm(OnTarget~Group * Quota_C + rollingSD -1)
summary(lm.mvar)
lm.mvar <- lm(OnTarget~Group * Quota_C + 1/rollingSD -1)
summary(lm.mvar)
lm.mvar <- lm(OnTarget~Group * Quota_C + I(1/rollingSD) -1)
summary(lm.mvar)
sqrt(mean((OnTarget - lm.mvar$fitted.values)^2))
summary(lm1)$coefficients[,1]
coef(lm1)
lm.mvar <- lm(OnTarget~Group * Quota_C + rollingSD -1)
summary(lm.mvar)
sqrt(mean((OnTarget - lm.mvar$fitted.values)^2))
select(raw.data, Sales, Quota, Attainment, OnTarget, MetTarget, Group)
source('D:/github/TC_SalesQuotas/TC_SalesQuota_UtilityCode.R', echo=TRUE)
source('D:/github/TC_SalesQuotas/TC_SalesQuota_UtilityCode.R', echo=TRUE)
gLMVar <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget, colour = Group)) +
geom_point(alpha = I(0.5)) +
geom_smooth(method = "loess", span = 0.5, degree = 2, se = FALSE, size = 1.25) +
scale_colour_manual(values = myPalContrasts) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gLMVar
rm(list=())
rm(list=ls())
library(knitr)
library(stringr)
library(readr)
library(dplyr)
library(lattice)
library(ggplot2)
knitr::opts_chunk$set(warning = FALSE
, message = FALSE
, echo = FALSE
)
knitr::opts_template$set(
fig.wide = list(fig.height = 4.5, fig.width = 8)
, fig.wideX = list(fig.height = 3, fig.width = 8)
)
read_chunk("TC_SalesQuota_UtilityCode.R")
read_chunk("TC_SalesQuota_Plots.R")
# a nice colour palette
myPal <- c("#8DD3C7", "#B0A8B3", "#9FB5D6", "#9EC0FA", "#DB8072")
myPalDark <- c("#4D8377", "#504853", "#3F5576", "#3E409A", "#7B2012")
myPalContrasts <- c(myPalDark[1], myPalDark[5], myPal[2], myPal[4]
,"#999999"
, myPal[1], myPal[5], myPalDark[2], myPalDark[4])
myPal.range <- colorRampPalette(c("#FFFFFF", myPal[3:1]))
myPal.rangeDark <- colorRampPalette(c("#FFFFFF", myPalDark[3:1]))
myPal.rangeDiv <- colorRampPalette(c(myPal[1], "#FFFFFF", myPal[5]))
# applied to lattice
MyLatticeFont <- list(font = 1, cex = 1, col = myPalDark[2])
MyLatticeTheme <- list(
par.main.text = MyLatticeFont
, par.xlab.text = MyLatticeFont
, par.ylab.text = MyLatticeFont
, axis.text = MyLatticeFont
, fontsize = list(text = 11, points = 7)
, plot.symbol = list(col = myPal[5], pch = 19, alpha = 0.75, cex = 0.75)
, box.umbrella = list(col = myPal[5], lty = 2, lwd = 2)
, box.rectangle = list(fill = myPal.range(100)[3], col = myPal[5], lwd = 2)
, box.dot = list(col = myPal[5], pch = 15, cex = 0.8)
, superpose.line = list(col = myPalContrasts)
, superpose.symbol = list(col = myPalContrasts)
, axis.line = list(col = myPal[2])
, strip.background = list(col=myPal[4])
, strip.border = list(col = myPal[2])
)
MyLatticeStrip = strip.custom(par.strip.text = MyLatticeFont)
# applied to ggplot2
myGgTheme <- theme(plot.title = element_text(colour = myPalDark[2], size = 10)
, axis.title = element_text(colour = myPalDark[2], size = 10)
, axis.text = element_text(colour = myPalDark[2], size = 10)
, legend.title = element_text(colour = myPalDark[2])
, legend.text = element_text(colour = myPalDark[2]))
source('D:/github/TC_SalesQuotas/TC_SalesQuota_UtilityCode.R', echo=TRUE)
source('D:/github/TC_SalesQuotas/TC_SalesQuota_Plots.R', echo=TRUE)
gLM1 <- ggplot(data = raw.data, aes(x = predict.lm1, y = OnTarget, colour = Group)) +
geom_point() +
scale_colour_manual(values = myPal[c(1,5)]) +
labs(list(title = "Fitted Values vs Actual"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gLM1
gLMVar <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget, colour = Group)) +
geom_point() +
scale_colour_manual(values = myPal[c(1,5)]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gLMVar
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,]) +
scale_colour_manual(values = myPal[c(1,5)]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[3]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[5]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[3]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[6]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[7]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[3]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[6]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[8]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
myPalContrasts
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[3]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[6]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[6]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[3]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = Quota_C)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget_C)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_hline(yintercept = c(clusterOneBoundary, clusterTwoBoundary) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_hline(yintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual (model includes derived variable"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = Quota_C)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget, shape = Group)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
densityplot(~OnTarget, groups = Group
#, col = myPalDark[c(1,5)]
, bw = 3
, kernel = "gaussian"
, scales = list(tck = c(1, 0))
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
, xlab = "To target %"
#, ylab = "Quota (1000's units)"
, main = "Group performance to targets"
, panel = panel.superpose
, panel.groups = function(x, group.number, ...) {
panel.densityplot(x, ...)
panel.abline(v = c(clusterOneBoundary, clusterTwoBoundary)
, col = myPalContrasts[3])
}
, auto.key = list(text = levels(Group), col = myPalDark[c(1,5)]
, columns = 2, space = "top"
, lines = FALSE)
)
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = rollingSD)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = rollingSD)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = predict.lm.mvar, y = rollingSD)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Fitted Values vs Actual among Group B clusters"
, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = Quota_C)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = Sales_C)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[cluster1[cluster1 > 24 & Cluster1 < 398],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[cluster1[cluster1 > 24 & cluster1 < 398],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
cluster1[cluster1 > 24 & cluster1 < 398]
cluster1[cluster1 > 24]
cluster1[]
cluster2
cluster3
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[cluster1,], colour = myPalContrasts[2]) +
geom_point(data = raw.data[cluster2,], colour = myPalContrasts[4]) +
geom_point(data = raw.data[cluster3,], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[(25:397)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(25:397)[cluster2],], colour = myPalContrasts[4]) +
geom_point(data = raw.data[(25:397)[cluster3],], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = Quota_C)) +
geom_point(data = raw.data[(25:397)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(25:397)[cluster2],], colour = myPalContrasts[4]) +
geom_point(data = raw.data[(25:397)[cluster3],], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = Sales_C)) +
geom_point(data = raw.data[(25:397)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(25:397)[cluster2],], colour = myPalContrasts[4]) +
geom_point(data = raw.data[(25:397)[cluster3],], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = Sales_C)) +
geom_point(data = raw.data[(25:397)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(25:397)[cluster2],], colour = myPalContrasts[5]) +
geom_point(data = raw.data[(25:397)[cluster3],], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = Sales_C)) +
geom_point(data = raw.data[(25:397)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(25:397)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(25:397)[cluster3],], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = I(rollingSD), y = Sales_C)) +
geom_point(data = raw.data[(25:397)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(25:397)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(25:397)[cluster3],], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = Sales_C)) +
geom_point(data = raw.data[(25:397)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(25:397)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(25:397)[cluster3],], colour = myPalContrasts[9]) +
#geom_vline(xintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[(25:397)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(25:397)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(25:397)[cluster3],], colour = myPalContrasts[9]) +
geom_hline(yintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
#labs(list(title = "Fitted Values vs Actual among Group B clusters"
#, x = "Fitted Values", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[(1:422)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(1:422)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(1:422)[cluster3],], colour = myPalContrasts[9]) +
geom_hline(yintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Analysis of Group B clusters"
, x = "On Target", y = "Mystery Variable")) +
theme_bw() + myGgTheme
gclus
(1:422)[cluster1]
(1:422)[cluster2]
(1:422)[cluster3]
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[(1:422)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(1:422)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(1:422)[cluster3],], colour = myPalContrasts[9]) +
geom_hline(yintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Analysis of Group B clusters"
, x = "Mystery Variable", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[(1:422)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(1:422)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(1:422)[cluster3],], colour = myPalContrasts[9]) +
#geom_hline(yintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Analysis of Group B clusters"
, x = "Mystery Variable", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[(1:422)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(1:422)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(1:422)[cluster3],], colour = myPalContrasts[9]) +
#geom_hline(yintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Analysis of Group B clusters"
, x = "Mystery Variable", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
gMVar <- ggplot(data = raw.data, aes(x = KQuota, y = rollingSD, colour = Group)) +
geom_point(alpha = I(0.5)) +
geom_smooth(span = 0.75, degree = 1, size = 1.25, se = FALSE) +
scale_colour_manual(values = myPalContrasts) +
labs(list(title = "Heteroskedastic Trend by Quota by Group"
, x = "Quota (1000's)", y = "Missing variable - falling variance")) +
theme_bw() + myGgTheme
gMVar
gclus <- ggplot(data = raw.data, aes(x = rollingSD, y = OnTarget)) +
geom_point(data = raw.data[(1:422)[cluster1],], colour = myPalContrasts[2]) +
geom_point(data = raw.data[(1:422)[cluster2],], colour = myPalContrasts[6]) +
geom_point(data = raw.data[(1:422)[cluster3],], colour = myPalContrasts[9]) +
#geom_hline(yintercept = c(clusterOneBoundary, clusterTwoBoundary)) +
labs(list(title = "Analysis of Group B clusters"
, x = "Mystery Variable", y = "On Target %")) +
theme_bw() + myGgTheme
gclus
rm(list=ls())
