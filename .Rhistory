)
knitr::opts_template$set(
fig.wide = list(fig.height = 4.5, fig.width = 8, fig.align='center')
, fig.wideX = list(fig.height = 3, fig.width = 9, fig.align='center')
, fig.relaxed = list(fig.height = 6, fig.width = 8, fig.align='center')
, fig.tile = list(fig.height = 3, fig.width = 3, fig.align='center')
)
par(mar = c(4,3,3,1))
library(readr)
library(dplyr)
library(lattice)
library(vcd)
library(MCMCpack)
library(MCMCvis)
source("TC_Theme.R")
link <- "TC_SalesQuota.csv"
raw.data <- read_csv(link) %>%
transmute(Group = as.factor(Group)
, KSales = Sales/1000
, KQuota = Quota/1000
, MetTarget = Attainment >= 100)
get.col <- function(colnm, grp) {
as.matrix(raw.data %>% filter(Group == grp) %>% dplyr::select(colnm))
}
set.seed(12321)
head(raw.data)
summary(raw.data)
summary(raw.data %>% filter(Group == "A"))
summary(raw.data %>% filter(Group == "B"))
cat("Quota to Sales Correlation")
with(raw.data, cor(KSales, KQuota))
xyplot(KSales~KQuota, data=raw.data
, groups = Group
, par.settings = MyLatticeTheme)
mns <- round(tapply(raw.data$KQuota, list(raw.data$Group, raw.data$MetTarget), mean),2)
bwplot(KQuota ~ factor(MetTarget) | Group
, data = raw.data
, scales = list(format = list(digits = 10))
, par.settings = MyLatticeTheme
, strip = MyLatticeStrip
, xlab = "Met target"
, ylab = "Quota (1000's units)"
, main = "Group performance to targets"
, panel = function(x, y, ...) {
panel.bwplot(x, y, ...)
panel.average(x, y
, lwd = 2
, lty = 1
, col = myPalDark[1]
, ...)
panel.text(1:2
, mns[which.packet(),] + 5
, mns[which.packet(),]
, col = myPalDark[1]
, cex = 1.1
, fontface = "bold"
, ...)
}
)
tta <- t.test(get.col("KQuota","A")[get.col("MetTarget", "A")]
, get.col("KQuota","A")[!get.col("MetTarget", "A")])
tta$data.name <- "Group A: Target not Met / Target Met"
ttb <- t.test(get.col("KQuota","B")[get.col("MetTarget", "B")]
, get.col("KQuota","B")[!get.col("MetTarget", "B")])
ttb$data.name <- "Group B: Target not Met / Target Met"
tta
ttb
with(raw.data, fourfold(table(MetTarget, Group), color = myPalFourFold))
b0 <- rep(0, 4)
B0 <- rep(0.2, 4)
model1 <- MCMClogit(I(MetTarget * 1) ~ 1,
data=raw.data, b0=b0[1],
B0=B0[1],
marginal.likelihood="Laplace", mcmc=10000)
model2 <- MCMClogit(I(MetTarget * 1) ~ KQuota + Group,
data=raw.data, b0=b0[1:3],
B0=B0[1:3],
marginal.likelihood="Laplace", mcmc=10000)
model3 <- MCMClogit(I(MetTarget * 1) ~ KQuota * Group,
data=raw.data, b0=b0,
B0=B0,
marginal.likelihood="Laplace", mcmc=10000)
BF <- BayesFactor(model1, model2, model3)
BF$BF.call
cat("log of Bayes Factors")
BF$BF.log.mat
summary(model3)$quantiles[, c(1, 3, 5)]
MCMCtrace(model3, pdf=FALSE, iter=10000
, col_den = myPalContrasts[9]
, col_pr = myPalContrasts[4]
, col_txt = myPalContrasts[4]
, lty_pr = 2
, priors = t(replicate(10000, rnorm(4, b0, B0))))
model3
class(model3)
model3[1]
model3[[1]]
model3[2]
model3[3]
dim(model3)
View(model3)
class(model3)
as.matrix(model3)
summary(model3)$quantiles[, c(1, 3, 5)]
MCMCtrace(as.matrix(model3), pdf=FALSE, iter=10000
, col_den = myPalContrasts[9]
, col_pr = myPalContrasts[4]
, col_txt = myPalContrasts[4]
, lty_pr = 2
, priors = t(replicate(10000, rnorm(4, b0, B0))))
MCMCplot(model3, ref_ovl = TRUE)
MCMCplot(as.matrix(model3), ref_ovl = TRUE)
installed.packages("BayesianFirstAid")
install.packages("BayesianFirstAid")
install.packages("BEST")
install.packages("rjags")
install.packages("rjags")
install.packages("BEST")
library(BEST)
bayesian.t.test(get.col("KQuota","A")[get.col("MetTarget", "A")]
, get.col("KQuota","A")[!get.col("MetTarget", "A")])
Bayesian.t.test(get.col("KQuota","A")[get.col("MetTarget", "A")]
, get.col("KQuota","A")[!get.col("MetTarget", "A")])
BESTout <- BESTmcmc(get.col("KQuota","A")[get.col("MetTarget", "A")]
, get.col("KQuota","A")[!get.col("MetTarget", "A")])
plot(BESTout)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("cli_alert_info")
install.packages("cli")
install.packages("cli")
install.packages("devtools")
install.packages("BayesianFirstAid")
devtools::install_github("rasmusab/bayesian_first_aid")
devtools::install_github("rasmusab/bayesian_first_aid")
installed.packages()
library(BayesianFirstAid)
library(BayesianFirstAid)
tta <- bayes.t.test(get.col("KQuota","A")[get.col("MetTarget", "A")]
, get.col("KQuota","A")[!get.col("MetTarget", "A")])
tta
summary(tta)
plot(tta)
tta$x_name
tta <- bayes.t.test(get.col("KQuota","A")[get.col("MetTarget", "A")]
, get.col("KQuota","A")[!get.col("MetTarget", "A")])
tta$x_name <- "Group A: Met Target"
tta$y_name <- "Group A: Target not Met"
plot(tta)
summary(tta)
diagnostics(tta)
model.code(tta)
tta$stats
tta$mcmc_samples
)names(tta$mcmc_samples
names(tta$mcmc_samples)
bayes_two_sample_t_test
model3[[3]]
model3[[1000]]
class(model3)
as.mcmc.list(model3)
MCMCtrace(as.mcmc.list(model3), pdf=FALSE, iter=10000
, col_den = myPalContrasts[9]
, col_pr = myPalContrasts[4]
, col_txt = myPalContrasts[4]
, lty_pr = 2
, priors = t(replicate(10000, rnorm(4, b0, B0))))
range(get.col("KQuota","B")[get.col("MetTarget", "B")])
tta$stats
tta$stats["mu_diff", "median"]
bayes.poisson.test(sum(get.col("KQuota","A")[get.col("KSales", "A")]), length(get.col("KQuota","A")[get.col("KSales", "A")]))
sum(get.col("KQuota","A")[get.col("KSales", "A")])
bayes.poisson.test(sum(get.col("KQuota","A")[get.col("KSales", "A")])*1000, length(get.col("KQuota","A")[get.col("KSales", "A")]))
sum(get.col("KQuota","A")[get.col("KSales", "A")])*1000
bayes.poisson.test(8805253, length(get.col("KQuota","A")[get.col("KSales", "A")]))
bayes.poisson.test(sum(get.col("KQuota","A")[get.col("Sales", "A")]), length(get.col("KQuota","A")[get.col("KSales", "A")]))
bayes.poisson.test(sum(get.col("KQuota","A")[get.col("KSales", "A")]*1000), length(get.col("KQuota","A")[get.col("KSales", "A")]))
sum(get.col("KQuota","A")[get.col("KSales", "A")]*1000)
sum(get.col("KQuota","A")[get.col("KSales", "A")]*1000)
kdata <- raw.data %>% select(-Sales, -Quotas)
raw.data <- read_csv(link) %>%
mutate(Group = as.factor(Group)
, KSales = Sales/1000
, KQuota = Quota/1000
, MetTarget = Attainment >= 100)
kdata <- raw.data %>% select(-Sales, -Quotas)
kdata <- raw.data %>% dplyr::select(-Sales, -Quotas)
select(raw.data, KSales)
dplyr::select(raw.data, KSales)
dplyr::select(raw.data, -KSales)
raw.data <- read_csv(link) %>%
mutate(Group = as.factor(Group)
, KSales = Sales/1000
, KQuota = Quota/1000
, Sales = as.integer(Sales)
, Quota = as.integer(Quota)
, MetTarget = Attainment >= 100)
raw.data
kdata <- raw.data %>% dplyr::select(-Sales, -Quota)
bayes.poisson.test(sum(get.col("Quota","A")[get.col("Sales", "A")]), length(get.col("KQuota","A")[get.col("KSales", "A")]))
sum(get.col("Quota","A")[get.col("Sales", "A")])
bayes.poisson.test(as.integer(sum(get.col("KQuota","A")[get.col("KSales", "A")])), length(get.col("KQuota","A")[get.col("KSales", "A")]))
bayes.poisson.test(as.integer(sum(get.col("KQuota","A")[get.col("MetTarget", "A")])), length(get.col("KQuota","A")[get.col("MetTarget", "A")]))
bayes.poisson.test(as.integer(sum(get.col("KQuota","A")[get.col("MetTarget", "A")])), length(get.col("KQuota","A")[!get.col("MetTarget", "A")]))
totSales <- sum(get.col("Sales","A")[get.col("MetTarget", "A")])
totSalesMet <- sum(get.col("Sales","A")[get.col("MetTarget", "A")])
numPersonsMet <- length(get.col("Sales","A")[get.col("MetTarget", "A")])
totSalesNotMet <- sum(get.col("Sales","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- length(get.col("Sales","A")[!get.col("MetTarget", "A")])
bayes.poisson.test(c(totSalesMet, totSalesNotMet), r = c(numPersonsMet, numPersonsNotMet))
numPersonsMet
numPersonsMet <- length(get.col("Sales","A")[get.col("MetTarget", "A")])L
length(get.col("Sales","A")[get.col("MetTarget", "A")])
totSalesMet <- sum(get.col("Sales","A")[get.col("MetTarget", "A")])
numPersonsMet <- as.integer(length(get.col("Sales","A")[get.col("MetTarget", "A")]))
totSalesNotMet <- sum(get.col("Sales","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- as.integer(length(get.col("Sales","A")[!get.col("MetTarget", "A")]))
bayes.poisson.test(c(totSalesMet, totSalesNotMet), r = c(numPersonsMet, numPersonsNotMet))
bayes.poisson.test(c(totSalesMet, totSalesNotMet), c(numPersonsMet, numPersonsNotMet))
totSalesMet <- sum(get.col("Sales","B")[get.col("MetTarget", "B")])
numPersonsMet <- as.integer(length(get.col("Sales","B")[get.col("MetTarget", "B")]))
totSalesNotMet <- sum(get.col("Sales","B")[!get.col("MetTarget", "B")])
numPersonsNotMet <- as.integer(length(get.col("Sales","B")[!get.col("MetTarget", "B")]))
bayes.poisson.test(c(totSalesMet, totSalesNotMet), c(numPersonsMet, numPersonsNotMet))
bayes.poisson.test(c(numPersonsMet, numPersonsNotMet), c(totSalesMet, totSalesNotMet))
totSalesMet <- sum(get.col("Sales","A")[get.col("MetTarget", "A")])
numPersonsMet <- as.integer(length(get.col("Sales","A")[get.col("MetTarget", "A")]))
totSalesNotMet <- sum(get.col("Sales","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- as.integer(length(get.col("Sales","A")[!get.col("MetTarget", "A")]))
bayes.poisson.test(c(numPersonsMet, numPersonsNotMet), c(totSalesMet, totSalesNotMet))
totSalesMet <- sum(get.col("Sales","A")[get.col("MetTarget", "A")])
numPersonsMet <- as.integer(length(get.col("Sales","A")[get.col("MetTarget", "A")]))
totSalesNotMet <- sum(get.col("Sales","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- as.integer(length(get.col("Sales","A")[!get.col("MetTarget", "A")]))
bpa <- bayes.poisson.test(c(numPersonsMet, numPersonsNotMet), c(totSalesMet, totSalesNotMet))
totSalesMet <- sum(get.col("Sales","B")[get.col("MetTarget", "B")])
numPersonsMet <- as.integer(length(get.col("Sales","B")[get.col("MetTarget", "B")]))
totSalesNotMet <- sum(get.col("Sales","B")[!get.col("MetTarget", "B")])
numPersonsNotMet <- as.integer(length(get.col("Sales","B")[!get.col("MetTarget", "B")]))
bpb <- bayes.poisson.test(c(numPersonsMet, numPersonsNotMet), c(totSalesMet, totSalesNotMet))
plot(bpa)
totSalesMet <- sum(get.col("Sales","B")[get.col("MetTarget", "B")])
numPersonsMet <- as.integer(length(get.col("Sales","B")[get.col("MetTarget", "B")]))
totSalesNotMet <- sum(get.col("Sales","B")[!get.col("MetTarget", "B")])
numPersonsNotMet <- as.integer(length(get.col("Sales","B")[!get.col("MetTarget", "B")]))
bpb <- bayes.poisson.test(c(numPersonsMet, numPersonsNotMet), c(totSalesMet, totSalesNotMet))
plot(bpb)
totSalesMet <- sum(get.col("Sales","B")[get.col("MetTarget", "B")])
numPersonsMet <- as.integer(length(get.col("Sales","B")[get.col("MetTarget", "B")]))
totSalesNotMet <- sum(get.col("Sales","B")[!get.col("MetTarget", "B")])
numPersonsNotMet <- as.integer(length(get.col("Sales","B")[!get.col("MetTarget", "B")]))
bpb <- bayes.poisson.test(c(totSalesMet, totSalesNotMet),c(numPersonsMet, numPersonsNotMet))
plot(bpb)
summary(bpb)
totSalesMet <- sum(get.col("Sales","A")[get.col("MetTarget", "A")])
numPersonsMet <- as.integer(length(get.col("Sales","A")[get.col("MetTarget", "A")]))
totSalesNotMet <- sum(get.col("Sales","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- as.integer(length(get.col("Sales","A")[!get.col("MetTarget", "A")]))
bpa <- bayes.poisson.test(c(totSalesMet, totSalesNotMet)c(numPersonsMet, numPersonsNotMet))
totSalesMet <- sum(get.col("Sales","A")[get.col("MetTarget", "A")])
numPersonsMet <- as.integer(length(get.col("Sales","A")[get.col("MetTarget", "A")]))
totSalesNotMet <- sum(get.col("Sales","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- as.integer(length(get.col("Sales","A")[!get.col("MetTarget", "A")]))
bpa <- bayes.poisson.test(c(totSalesMet, totSalesNotMet), c(numPersonsMet, numPersonsNotMet))
plot(bpa)
c(numPersonsMet, numPersonsNotMet)
bpa
totSalesMet <- sum(get.col("Sales","B")[get.col("MetTarget", "B")])
numPersonsMet <- as.integer(length(get.col("Sales","B")[get.col("MetTarget", "B")]))
totSalesNotMet <- sum(get.col("Sales","B")[!get.col("MetTarget", "B")])
numPersonsNotMet <- as.integer(length(get.col("Sales","B")[!get.col("MetTarget", "B")]))
bpb <- bayes.poisson.test(c(totSalesMet, totSalesNotMet),c(numPersonsMet, numPersonsNotMet))
plot(bpb)
bpb
numPersonsMet <- sum([get.col("MetTarget", "B")])*1)
numPersonsMet <- sum(get.col("MetTarget", "B")*1L)
numPersonsNotMet <- sum(!get.col("MetTarget", "B")*1L)
totQuota <- sum(get.col("Quota","B"))
totQuota <- sum(get.col("Quota","B")[get.col("MetTarget", "B")])
numPersonsMet <- sum(get.col("MetTarget", "B")*1L)
totSalesNotMet <- sum(get.col("Sales","B")[!get.col("MetTarget", "B")])
numPersonsNotMet <- sum(!get.col("MetTarget", "B")*1L)
bpb <- bayes.poisson.test(c(totSalesMet, totSalesNotMet),c(numPersonsMet, numPersonsNotMet))
bpb
totSalesNotMet <- sum(get.col("Quota","B")[!get.col("MetTarget", "B")])
bpb <- bayes.poisson.test(c(totSalesMet, totSalesNotMet),c(numPersonsMet, numPersonsNotMet))
bpb
plot(bpb)
totQuota <- sum(get.col("Quota","A")[get.col("MetTarget", "A")])
numPersonsMet <- sum(get.col("MetTarget", "A")*1L)
totSalesNotMet <- sum(get.col("Quota","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- sum(!get.col("MetTarget", "A")*1L)
bpa <- bayes.poisson.test(c(totSalesMet, totSalesNotMet), c(numPersonsMet, numPersonsNotMet))
plot(bpa)
bpa
sum(get.col("Quota","A")[get.col("MetTarget", "A")])
sum(get.col("MetTarget", "A")*1L)
sum(get.col("Quota","A")[!get.col("MetTarget", "A")])
sum(!get.col("MetTarget", "A")*1L)
totQuota <- sum(get.col("Quota","A")[get.col("MetTarget", "A")])
numPersonsMet <- sum(get.col("MetTarget", "A")*1L)
totSalesNotMet <- sum(get.col("Quota","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- sum(!get.col("MetTarget", "A")*1L)
bpa <- bayes.poisson.test(c(totSalesMet, totSalesNotMet), c(numPersonsMet, numPersonsNotMet))
bpa
plot(bpa)
sum(get.col("MetTarget", "A")*1L)
sum(!get.col("MetTarget", "A")*1L)
sum(get.col("Quota","A")[get.col("MetTarget", "A")])
sum(get.col("Quota","A")[!get.col("MetTarget", "A")])
bpa <- bayes.poisson.test(c(totSalesMet, totSalesNotMet), c(numPersonsMet, numPersonsNotMet))
bpa
c(totSalesMet, totSalesNotMet)
totQuota <- sum(get.col("Quota","A")[get.col("MetTarget", "A")])
numPersonsMet <- sum(get.col("MetTarget", "A")*1L)
totQuotaNotMet <- sum(get.col("Quota","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- sum(!get.col("MetTarget", "A")*1L)
bpa <- bayes.poisson.test(c(totQuota, totQuotaNotMet), c(numPersonsMet, numPersonsNotMet))
bpa
plot(bpa)
totQuota <- sum(get.col("Quota","B")[get.col("MetTarget", "B")])
numPersonsMet <- sum(get.col("MetTarget", "B")*1L)
totSalesNotMet <- sum(get.col("Quota","B")[!get.col("MetTarget", "B")])
numPersonsNotMet <- sum(!get.col("MetTarget", "B")*1L)
bpa <- bayes.poisson.test(c(totQuota, totQuotaNotMet), c(numPersonsMet, numPersonsNotMet))
bpb
plot(bpb)
totQuota <- sum(get.col("Quota","A")[get.col("MetTarget", "A")])
numPersonsMet <- sum(get.col("MetTarget", "A")*1L)
totQuotaNotMet <- sum(get.col("Quota","A")[!get.col("MetTarget", "A")])
numPersonsNotMet <- sum(!get.col("MetTarget", "A")*1L)
bpa <- bayes.poisson.test(c(totQuota, totQuotaNotMet), c(numPersonsMet, numPersonsNotMet))
bpa
plot(bpa)
bpa
bpa$stats
bpb$stats
mns
class(mns)
mns[, c(TRUE, FALSE)]
mns[, c("TRUE", "FALSE")]
scale(dplyr::select(raw.data, KQuota, KSales))
b0 <- rep(0, 4)
B0 <- rep(1, 4)
raw.data <- raw.data %>%
mutate(scQuota = scale(dplyr::select(raw.data, Quota)))
model1 <- MCMClogit(I(MetTarget * 1) ~ 1,
data=raw.data, b0=b0[1],
B0=B0[1],
marginal.likelihood="Laplace", mcmc=10000)
model2 <- MCMClogit(I(MetTarget * 1) ~ scQuota + Group,
data=raw.data, b0=b0[1:3],
B0=B0[1:3],
marginal.likelihood="Laplace", mcmc=10000)
model3 <- MCMClogit(I(MetTarget * 1) ~ scQuota * Group,
data=raw.data, b0=b0,
B0=B0,
marginal.likelihood="Laplace", mcmc=10000)
BF <- BayesFactor(model1, model2, model3)
cat("log of Bayes Factors")
BF$BF.log.mat
summary(model3)$quantiles[, c(1, 3, 5)]
MCMCtrace(as.mcmc.list(model3), pdf=FALSE, iter=10000
, col_den = myPalContrasts[9]
, col_pr = myPalContrasts[4]
, col_txt = myPalContrasts[4]
, lty_pr = 2
, priors = t(replicate(10000, rnorm(4, b0, B0))))
predict_mcmc_one <- function(x) {
model3[, 1] + model3[, 2] * raw.data$KQuota[x] +
model3[, 3] * (raw.data$Group[x] == "B") +
model3[, 4] * raw.data$KQuota[x] * (raw.data$Group[x] == "B")
}
preds <- t(sapply(1:nrow(raw.data), predict_mcmc_one))
segments(x0 = raw.data$KQuota, y0 = preds_quants[, 1], x1 = raw.data$KQuota, y1 = preds_quants[, 5]
, col = myPalContrasts[as.numeric(raw.data$Group) + 5]
, lwd = 0.25)
preds_quants <- t(apply(exp(preds)/ (1 + exp(preds)), 1, quantile))
plot(preds_quants[, 3]~raw.data$KQuota, col = myPalContrasts[as.numeric(raw.data$Group)]
, pch=20, cex = 0.75
, ylim= c(0, 1)
, xlab="Quota"
, ylab="Modelled Probability of Meeting Target")
segments(x0 = raw.data$KQuota, y0 = preds_quants[, 1], x1 = raw.data$KQuota, y1 = preds_quants[, 5]
, col = myPalContrasts[as.numeric(raw.data$Group) + 5]
, lwd = 0.25)
predict_mcmc_one <- function(x) {
model3[, 1] + model3[, 2] * raw.data$KQuota[x] +
model3[, 3] * (raw.data$Group[x] == "B") +
model3[, 4] * raw.data$KQuota[x] * (raw.data$Group[x] == "B")
}
preds <- t(sapply(1:nrow(raw.data), predict_mcmc_one))
preds_quants <- t(apply(exp(preds)/ (1 + exp(preds)), 1, quantile))
plot(preds_quants[, 3]~raw.data$KQuota, col = myPalContrasts[as.numeric(raw.data$Group)]
, pch=20, cex = 0.75
, ylim= c(0, 1)
, xlab="Quota"
, ylab="Modelled Probability of Meeting Target")
segments(x0 = raw.data$KQuota, y0 = preds_quants[, 1], x1 = raw.data$KQuota, y1 = preds_quants[, 5]
, col = myPalContrasts[as.numeric(raw.data$Group) + 5]
, lwd = 0.25)
predict_mcmc_one <- function(x) {
model3[, 1] + model3[, 2] * raw.data$KQuota[x] +
model3[, 3] * (raw.data$Group[x] == "B") +
model3[, 4] * raw.data$KQuota[x] * (raw.data$Group[x] == "B")
}
preds <- t(sapply(1:nrow(raw.data), predict_mcmc_one))
preds_quants <- t(apply(exp(preds)/ (1 + exp(preds)), 1, quantile))
plot(preds_quants[, 3]~raw.data$KQuota, col = myPalContrasts[as.numeric(raw.data$Group)]
, pch=20, cex = 0.75
, ylim= c(0, 1)
, xlab="Quota"
, ylab="Modelled Probability of Meeting Target")
segments(x0 = raw.data$KQuota, y0 = preds_quants[, 1], x1 = raw.data$KQuota, y1 = preds_quants[, 5]
, col = myPalContrasts[as.numeric(raw.data$Group) + 5]
, lwd = 0.25)
segments(x0 = raw.data$KQuota, y0 = preds_quants[, 2], x1 = raw.data$KQuota, y1 = preds_quants[, 4]
, col = myPalContrasts[as.numeric(raw.data$Group)]
, lwd = 1)
legend("topright", legend = paste("group", c("A", "B"), " - median and HDI")
, col = myPalContrasts[1:2], pch = 20, lty = 1, cex=0.75)
abline(0.5, 0, lty=2, lwd=0.5)
points(MetTarget~KQuota, cex = 0.4
, data=raw.data, pch = as.character(raw.data$MetTarget)
, col = myPalContrasts[as.numeric(raw.data$Group)]
, subset = raw.data$Group == "B")
predict_mcmc_one <- function(x) {
model3[, 1] + model3[, 2] * raw.data$scQuota[x] +
model3[, 3] * (raw.data$Group[x] == "B") +
model3[, 4] * raw.data$scQuota[x] * (raw.data$Group[x] == "B")
}
preds <- t(sapply(1:nrow(raw.data), predict_mcmc_one))
preds_quants <- t(apply(exp(preds)/ (1 + exp(preds)), 1, quantile))
plot(preds_quants[, 3]~raw.data$scQuota, col = myPalContrasts[as.numeric(raw.data$Group)]
, pch=20, cex = 0.75
, ylim= c(0, 1)
, xlab="Quota"
, ylab="Modelled Probability of Meeting Target")
segments(x0 = raw.data$scQuota, y0 = preds_quants[, 1], x1 = raw.data$scQuota, y1 = preds_quants[, 5]
, col = myPalContrasts[as.numeric(raw.data$Group) + 5]
, lwd = 0.25)
segments(x0 = raw.data$scQuota, y0 = preds_quants[, 2], x1 = raw.data$scQuota, y1 = preds_quants[, 4]
, col = myPalContrasts[as.numeric(raw.data$Group)]
, lwd = 1)
legend("topright", legend = paste("group", c("A", "B"), " - median and HDI")
, col = myPalContrasts[1:2], pch = 20, lty = 1, cex=0.75)
MCMCplot(as.mcmc.list(model3), ref_ovl = TRUE)
MCMCplot(as.mcmc.list(model3), ref_ovl = TRUE)
predict_mcmc_one <- function(x) {
model2[, 1] + model2[, 2] * raw.data$scQuota[x] +
model2[, 3] * (raw.data$Group[x] == "B") +
#model2[, 4] * raw.data$scQuota[x] * (raw.data$Group[x] == "B")
}
predict_mcmc_one <- function(x) {
model2[, 1] + model2[, 2] * raw.data$scQuota[x] +
model2[, 3] * (raw.data$Group[x] == "B")# +
#model2[, 4] * raw.data$scQuota[x] * (raw.data$Group[x] == "B")
}
preds <- t(sapply(1:nrow(raw.data), predict_mcmc_one))
preds_quants <- t(apply(exp(preds)/ (1 + exp(preds)), 1, quantile))
plot(preds_quants[, 3]~raw.data$scQuota, col = myPalContrasts[as.numeric(raw.data$Group)]
, pch=20, cex = 0.75
, ylim= c(0, 1)
, xlab="Quota"
, ylab="Modelled Probability of Meeting Target")
segments(x0 = raw.data$scQuota, y0 = preds_quants[, 1], x1 = raw.data$scQuota, y1 = preds_quants[, 5]
, col = myPalContrasts[as.numeric(raw.data$Group) + 5]
, lwd = 0.25)
segments(x0 = raw.data$scQuota, y0 = preds_quants[, 2], x1 = raw.data$scQuota, y1 = preds_quants[, 4]
, col = myPalContrasts[as.numeric(raw.data$Group)]
, lwd = 1)
legend("topright", legend = paste("group", c("A", "B"), " - median and HDI")
, col = myPalContrasts[1:2], pch = 20, lty = 1, cex=0.75)
abline(0.5, 0, lty=2, lwd=0.5)
points(MetTarget~scQuota, cex = 0.4
, data=raw.data, pch = as.character(raw.data$MetTarget)
, col = myPalContrasts[as.numeric(raw.data$Group)]
, subset = raw.data$Group == "B")
cite(BayesianFirstAid)
cite("BayesianFirstAid")
totQuota <- sum(get.col("Quota","A")[get.col("MetTarget", "A")])
numPersonsMet <- sum(get.col("MetTarget", "A")*1L)
totQuotaNotMet <- sum(get.col("Quota","B")[get.col("MetTarget", "B")])
numPersonsNotMet <- sum(get.col("MetTarget", "B")*1L)
bpa <- bayes.poisson.test(c(totQuota, totQuotaNotMet), c(numPersonsMet, numPersonsNotMet))
bpa
plot(bpa)
install.packages("blogdown")
blogdown::install_hugo()
blogdown::new_site(theme = "vividvilla/ezhil")
knit_with_parameters()
install.packages("BayesianFirstAid")
install.packages("devtools")
devtools::install_github("rasmusab/bayesian_first_aid")
install.packages("rjags")
devtools::install_github("rasmusab/bayesian_first_aid")
devtools::install_github("rasmusab/bayesian_first_aid")
install.packages("rjags")
devtools::install_github("rasmusab/bayesian_first_aid")
install.packages("remotes")
remotes::install_github("rasmusab/bayesian_first_aid")
remotes::install_github("rasmusab/bayesian_first_aid")
library(rjags)
install.packages("rjags", type = "source")
library(rjags)
remove.packages("rjags")
install.packages("rjags", type = "source")
library(rjags)
remove.packages("rjags")
remove.packages("rjags")
install.packages("rjags", type = "source", clean = TRUE)
