missing[1,] <- c(1
, wndws[1,"idx"]-1
, length(1:(wndws[1,"idx"]-1))
)
missing[2,] <- c(wndws[nrow(wndws)-floor(k/2),"idx"]+floor(k/2)+1
, n
, length((wndws[nrow(wndws)-floor(k/2),"idx"]+floor(k/2)+1):n)
)
# lower end
rollingSD[missing[1,1]:missing[1,2]] <- sample(rollingSD[(missing[1,2]+1):(missing[1,2]+1+k)], missing[1,3], replace = TRUE)
# upper end
rollingSD[missing[2,1]:missing[2,2]] <- sample(rollingSD[(missing[2,1]-1):(missing[2,1]-1-k)], missing[2,3], replace = TRUE)
raw.data <- cbind(raw.data[order(raw.data$Quota, decreasing = FALSE),], rollingSD)
q <- qplot(data = raw.data, x = KQuota, y = rollingSD
, colour = Group, alpha = I(0.5), xlim = c(15,52))
q <- q + geom_smooth(span = 0.2, degree = 0, size = 1.25)
q <- q + labs(list(title = "Heteroskedastic Trend by Quota by Group"
, x = "Quota (1000's)", y = "Missing variable - falling variance")) + theme_bw()
q
set.seed(102)
k <- 50
wndws <- cbind(lwr = 1:(n-k+1), idx = floor(k/2):(n-floor(k/2)), upr = k:n)
rollingSD <- as.numeric(rep(NA, n))
for (i in 1:dim(wndws)[1]) {
rollingSD[wndws[i,"idx"]] <-  sd(raw.data$OnTarget[order(raw.data$Quota, decreasing = FALSE)][wndws[i,"lwr"]:wndws[i,"upr"]])
}
# bootstrap missing rolling window ends
missing <- matrix(nrow = 2, ncol = 3)
missing[1,] <- c(1
, wndws[1,"idx"]-1
, length(1:(wndws[1,"idx"]-1))
)
missing[2,] <- c(wndws[nrow(wndws)-floor(k/2),"idx"]+floor(k/2)+1
, n
, length((wndws[nrow(wndws)-floor(k/2),"idx"]+floor(k/2)+1):n)
)
# lower end
rollingSD[missing[1,1]:missing[1,2]] <- sample(rollingSD[(missing[1,2]+1):(missing[1,2]+1+k)], missing[1,3], replace = TRUE)
# upper end
rollingSD[missing[2,1]:missing[2,2]] <- sample(rollingSD[(missing[2,1]-1):(missing[2,1]-1-k)], missing[2,3], replace = TRUE)
raw.data <- cbind(raw.data[order(raw.data$Quota, decreasing = FALSE),], rollingSD)
q <- qplot(data = raw.data, x = KQuota, y = rollingSD
, colour = Group, alpha = I(0.5), xlim = c(15,52))
q <- q + geom_smooth(span = 0.2, degree = 0, size = 1.25)
q <- q + labs(list(title = "Heteroskedastic Trend by Quota by Group"
, x = "Quota (1000's)", y = "Missing variable - falling variance")) + theme_bw()
q
lm1 <- lm(OnTarget ~ Group * Quota -1)
summary(lm1)
lm1 <- lm(OnTarget ~ Group * Quota_C -1)
summary(lm1)
Quota_C
```{r prologue, include=FALSE}
library(knitr)
library(stringr)
library(readr)
library(dplyr)
library(lattice)
library(ggplot2)
knitr::opts_chunk$set(warning = FALSE
, message = FALSE
, echo = FALSE
)
knitr::opts_template$set(
fig.wide = list(fig.height = 4.5, fig.width = 8)
, fig.wideX = list(fig.height = 3, fig.width = 8)
)
# a nice colour palette
myPal <- c("#8DD3C7", "#B0A8B3", "#9FB5D6", "#9EC0FA", "#DB9082")
myPal.range <- colorRampPalette(c("#FFFFFF", c(myPal[3:1] )))
# original link
link <- "https://raw.githubusercontent.com/julianhatwell/TC_SalesQuotas/master/TC_SalesQuota.csv"
# local file
#link <- "C:\\Dev\\Study\\R\\Tanc_investigation\\TC_SalesQuota.csv"
raw.data <- read_csv(link)
n = nrow(raw.data)
attach(raw.data)
raw.data$Group <- as.factor(Group)
#raw.data$KSales <- Sales/1000
#raw.data$KQuota <- Quota/1000
raw.data$OnTarget <- (Sales-Quota)/Quota*100
raw.data$MetTarget <- raw.data$OnTarget >= 0
attach(raw.data)
head(raw.data)
summary(select(raw.data, -c(Sales,Quota, Attainment)))
head(Sales)
lm.mvar <- lm(OnTarget~Group:Quota_C + rollingSD)
summary(lm.mvar)
lm.mvar <- lm(OnTarget~Group:Quota_C + rollingSD-1)
summary(lm.mvar)
lm.mvar <- lm(OnTarget~Group*Quota_C + rollingSD-1)
summary(lm.mvar)
plot(lm.mvar)
lm.mvar <- lm(OnTarget~Group:Quota_C + rollingSD-1)
summary(lm.mvar)
plot(lm.mvar)
lm.mvar <- lm(OnTarget~Group:Quota_C:rollingSD-1)
summary(lm.mvar)
plot(lm.mvar)
lm.mvar <- lm(OnTarget~Group:Quota_C:rollingSD)
summary(lm.mvar)
plot(lm.mvar)
summary(lm.mvar)
plot(lm.mvar)
(Group == "A")
(Group == "A")*1
(Group == "A")*1*0.000564*Quota
(Group == "B")*1*(-0.075801)*Quota
lm.mvar <- lm(OnTarget~Group+Quota+rollingSD)
summary(lm.mvar)
plot(lm.mvar)
lm.mvar <- lm(OnTarget~Group:Quota+rollingSD)
summary(lm.mvar)
plot(lm.mvar)
round(summary(lm.raw)$coef, 2)
round(summary(lm.raw)$coef, 3)
round(summary(lm.raw)$coef, 4)
lm.mvar <- lm(OnTarget~Group:Quota+rollingSD)
summary(lm.mvar)
plot(lm.mvar)
round(summary(lm.raw)$coef, 4)
summary(lm.raw)
round(summary(lm.mvar)$coef, 4)
summary(lm.mvar)
round(summary(lm.mvar)$coef, 4)
lm.mvar <- lm(OnTarget~Group*Quota+rollingSD)
summary(lm.mvar)
plot(lm.mvar)
lm.mvar <- lm(OnTarget~Group:Quota+rollingSD)
summary(lm.mvar)
plot(lm.mvar)
round(summary(lm.mvar)$coef, 4)
raw.data$simSales <- rnorm(n, mean(Quota) + 7.9743 +
(Group == "B")*1*(-0.0003)*Quota
) -0.6554 + rollingSD
q <- qplot(data = raw.data
, x = KQuota, y = KsimSales
, colour = Group
, alpha = I(0.5))
q <- q + geom_smooth(method = "lm", se = FALSE, size = 1.25)
q <- q + geom_abline(intercept=0, slope=1, linetype = "dotted", alpha = 0.75)
q <- q + labs(list(title = "Sales by Quota by Group \nwith lm fit and identity line"
, x = "Quota (1000's)", y = "Sales (1000's)")) + theme_bw()
q
q <- qplot(data = raw.data
, x = KQuota, y = simSales
, colour = Group
, alpha = I(0.5))
q <- q + geom_smooth(method = "lm", se = FALSE, size = 1.25)
q <- q + geom_abline(intercept=0, slope=1, linetype = "dotted", alpha = 0.75)
q <- q + labs(list(title = "Sales by Quota by Group \nwith lm fit and identity line"
, x = "Quota (1000's)", y = "Sales (1000's)")) + theme_bw()
q
raw.data$simSales <- rnorm(n, mean(Quota) + 7.9743 +
(Group == "B")*1*(-0.0003)*Quota +
(-0.6554) * rollingSD)
q <- qplot(data = raw.data
, x = KQuota, y = simSales
, colour = Group
, alpha = I(0.5))
q <- q + geom_smooth(method = "lm", se = FALSE, size = 1.25)
q <- q + geom_abline(intercept=0, slope=1, linetype = "dotted", alpha = 0.75)
q <- q + labs(list(title = "Sales by Quota by Group \nwith lm fit and identity line"
, x = "Quota (1000's)", y = "Sales (1000's)")) + theme_bw()
q
(-0.6554) * rollingSD
(Group == "B")*1*(-0.0003)*Quota
raw.data$simSales <- rnorm(n, mean(Quota) + 7.9743 +
(Group == "B")*1*(-0.0003)*Quota +
(-0.6554) * rollingSD)
q <- qplot(data = raw.data
, x = KQuota, y = simSales
, colour = Group
, alpha = I(0.5))
q <- q + geom_smooth(method = "lm", se = FALSE, size = 1.25)
q <- q + geom_abline(intercept=0, slope=1, linetype = "dotted", alpha = 0.75)
q <- q + labs(list(title = "Sales by Quota by Group \nwith lm fit and identity line"
, x = "Quota (1000's)", y = "Sales (1000's)")) + theme_bw()
q
q <- qplot(data = raw.data
, x = Quota, y = simSales
, colour = Group
, alpha = I(0.5))
q <- q + geom_smooth(method = "lm", se = FALSE, size = 1.25)
q <- q + geom_abline(intercept=0, slope=1, linetype = "dotted", alpha = 0.75)
q <- q + labs(list(title = "Sales by Quota by Group \nwith lm fit and identity line"
, x = "Quota (1000's)", y = "Sales (1000's)")) + theme_bw()
q
raw.data$KsimSales <- raw.data$simSales/1000
raw.data$simOnTarget <- (simSales-Quota)/Quota*100
raw.data$simMetTarget <- raw.data$OnTarget >= 0
attach(raw.data)
q <- qplot(data = raw.data
, x = KQuota, y = KsimSales
, colour = Group
, alpha = I(0.5))
q <- q + geom_smooth(method = "lm", se = FALSE, size = 1.25)
q <- q + geom_abline(intercept=0, slope=1, linetype = "dotted", alpha = 0.75)
q <- q + labs(list(title = "Sales by Quota by Group \nwith lm fit and identity line"
, x = "Quota (1000's)", y = "Sales (1000's)")) + theme_bw()
q
```
raw.data$simSales <- rnorm(n, mean(Quota) + 7.9743 +
(Group == "B")*1*(-0.0003)*Quota +
(-0.6554) * rollingSD)
rm(list = ls())
attach(raw.data)
```{r Exploratory_Graph_simSales_depends_Quota, eval=FALSE}
round(summary(lm.mvar)$coef, 4)
source('~/.active-rstudio-document', echo=TRUE)
round(summary(lm.mvar)$coef, 4)
source('~/.active-rstudio-document', echo=TRUE)
round(summary(lm.mvar)$coef, 4)
round(summary(lm.mvar)$coef, 4)[1,1]
lm.mvar$coefficients
round(lm.mvar)$coef
round(lm.mvar$coefficients,0)
round(lm.mvar$coefficients,4)
coefs <- round(lm.mvar$coefficients,4)
resid(lm.mvar)
sd(resid(lm.mvar))
lm.mvar$residuals
sd(lm.mvar$residuals)
plot(Sales, simSales)
sqrt(mean((simSales-Sales)^2))
(simSales-Sales)
(simSales-Sales)^2
mean((simSales-Sales)^2)
sqrt(mean((simSales-Sales)^2))
predict(lm.mvar, Quota)
predict(lm.mvar, raw.data$Quota)
predict(lm.mvar, raw.data)
plot(predict(lm.mvar, raw.data), OnTarget)
simTarget-OnTarget
source('~/.active-rstudio-document', echo=TRUE)
simTarget-OnTarget
sqrt(mean((simTarget-OnTarget)^2))-mean(Quota)
plot(predict(lm.mvar, raw.data), OnTarget)
plot(Quota + predict(lm.mvar, raw.data), Quota + OnTarget)
qplot(Quota + predict(lm.mvar, raw.data), Quota + OnTarget)
qplot(Quota + predict(lm.mvar, raw.data), Quota + OnTarget, colour = Group)
qplot(Quota + predict(lm1, raw.data), Quota + OnTarget, colour = Group)
qplot(Quota + predict(lm.mvar, raw.data), Quota + OnTarget, colour = Group)
plot(Quota)
plot(OnTarget)
plot(simOnTarget)
plot(Quota + OnTarget)
plot(Quota + simOnTarget)
plot(Sales + simOnTarget)
plot(Sales + OnTarget)
plot(Sales + Quota)
predict(lm.mvar, raw.data)
identical(predict(lm.mvar, raw.data), sinOnTarget)
identical(predict(lm.mvar, raw.data), simOnTarget)
plot(OnTarget)
plot(simOnTarget)
plot(OnTarget)
plot(simOnTarget)
sqrt(mean((simTarget-OnTarget)^2))
sqrt(mean((simTarget-OnTarget)^2))-mean(Quota)
# root mean squared error
qplot(predict(lm1, raw.data), OnTarget, colour = Group) + theme_bw()
source('~/.active-rstudio-document', echo=TRUE)
lm.mvar <- lm(OnTarget~Group+Group:Quota+rollingSD)
summary(lm.mvar)
(Group == "A") * 1 * coefs[1]
(Group == "A")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
lm.mvar
lm.mvar$terms
predict(lm.mvar, newdata = data.frame(Group = "A", Quota = 30000, rollingSD = 16))
predict(lm.mvar, newdata = data.frame(Group = "A", Quota = 30000, rollingSD = 10))
predict(lm.mvar, newdata = data.frame(Group = "A", Quota = 30000, rollingSD = 1))
predict(lm.mvar, newdata = data.frame(Group = "B", Quota = 30000, rollingSD = 16))
predict(lm.mvar, newdata = data.frame(Group = "B", Quota = 30000, rollingSD = 10))
predict(lm.mvar, newdata = data.frame(Group = "B", Quota = 30000, rollingSD = 1))
library(dplyr)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, Legal, Partner)
View(rutil_csv)
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
table(month, Partner)
library(vcd)
table(legal, month, Partner)
table(Legal, month, Partner)
, month, day, CapacityName
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
filter(Partner %in% c("KHEA", "KHEI")) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
table(Legal, month, Partner)
table(month, Partner)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day))
View(rutil)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
filter(Legal %in% c("KHEA", "KHEI")) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
table(month, Partner)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
filter(Legal %in% c("KHEA", "KHEI") & Partner !(%in% c("ACCA", "CFA", "CPAA", "SQP"))) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
table(month, Partner)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
filter(Legal %in% c("KHEA", "KHEI") | Partner !(%in% c("ACCA", "CFA", "CPAA", "SQP"))) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
table(month, Partner)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
filter(Legal %in% c("KHEA", "KHEI") & !(Partner (%in% c("ACCA", "CFA", "CPAA", "SQP"))) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
table(month, Partner)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
filter(Legal %in% c("KHEA", "KHEI") & !(Partner %in% c("ACCA", "CFA", "CPAA", "SQP"))) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
table(month, Partner)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
filter(Legal %in% c("KHEA", "KHEI")) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
table(month, Partner, Legal)
structable(month, Partner, Legal)
structable(Legal)
structable(Legal, Partner)
Legal == "KP"
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
filter(Legal %in% c("KHEA", "KHEI")) %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
structable(Legal, Partner)
structable(Legal~Partner)
library(dplyr)
rutil_csv <- read.csv("I:\\04.Projects\\2016\\Room_Util_Finance_Rep\\Room_Util_All.csv", na.strings = "NULL")
rutil <- rutil_csv %>%
#filter(Legal %in% c("KHEA", "KHEI")) %>%
mutate(event_Date = as.Date(event_date, format = "%d/%m/%Y")
, year = as.factor(year)
, month = as.factor(month)
, day = as.factor(day)) %>%
select(event_id, room_id
, event_date, year
, month, day, CapacityName
, SessionID, Legal, Partner)
attach(rutil)
structable(Legal~Partner)
structable(Legal~Partner+Month)
structable(Legal~Partner, Month)
structable(Legal~Partner,month)
structable(Legal~Partner+month)
structable(Legal+month~Partner)
example("structable")
structable(month~Legal+Partner)
mosaic(structable(month~Legal+Partner))
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
plot(Sales(Group == "B"))
attach(raw.data)
plot(Sales(Group == "B"))
Sales
plot(Sales[Group == "B"])
plot(Sales)
raw.data <- read_csv(link)
n = nrow(raw.data)
attach(raw.data)
plot(Sales)
plot(Sales[Group == "B"])
raw.data$Group <- as.factor(Group)
raw.data$KSales <- Sales/1000
raw.data$KQuota <- Quota/1000
raw.data$OnTarget <- (Sales-Quota)/Quota*100
raw.data$MetTarget <- raw.data$OnTarget >= 0
attach(raw.data)
plot(Sales[Group == "B"])
plot(OnTarget[Group == "B"])
plot(OnTarget[Group == "A"])
densityplot(~OnTarget, groups = Group)
densityplot(~OnTarget, groups = Group, bw = 0.1)
densityplot(~OnTarget, groups = Group, bw = 0.5)
densityplot(~OnTarget, groups = Group, bw = 1)
densityplot(~OnTarget, groups = Group, bw = 5)
densityplot(~OnTarget, groups = Group, bw = 4)
densityplot(~OnTarget, groups = Group, bw = 3)
densityplot(~OnTarget, groups = Group, bw = 2)
densityplot(~OnTarget, groups = Group, bw = 3)
densityplot(~OnTarget, groups = Group, bw = 3, kernel = "gaussian")
densityplot(~OnTarget, groups = Group, bw = 3, kernel = "epanechnikov")
densityplot(~OnTarget, groups = Group, bw = 3, kernel = "rectangular")
densityplot(~OnTarget, groups = Group, bw = 3, kernel = "triangular")
densityplot(~OnTarget, groups = Group, bw = 3, kernel = "biweight")
densityplot(~OnTarget, groups = Group, bw = 3, kernel = "cosine")
densityplot(~OnTarget, groups = Group, bw = 3, kernel = "optcosine")
densityplot(~OnTarget, groups = Group, bw = 3, kernel = "gaussian")
rm(list = ls)
rm(list = ls())
